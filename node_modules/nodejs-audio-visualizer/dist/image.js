"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bmp_js_1 = require("bmp-js");
var jimp_1 = __importDefault(require("jimp"));
exports.drawRect = function (imageDstBuffer, position, size, color) {
    for (var currY = position.y; currY < position.y + size.height; currY++) {
        for (var currX = position.x; currX < position.x + size.width; currX++) {
            var idx = (imageDstBuffer.width * currY + currX) << 2;
            imageDstBuffer.data[idx + 1] = color.blue;
            imageDstBuffer.data[idx + 2] = color.green;
            imageDstBuffer.data[idx + 3] = color.red;
        }
    }
};
var drawSpectrum = function (imageDstBuffer, spectrum, size, color) {
    var paddingLeft = Math.trunc(imageDstBuffer.width / 2 - size.width / 2);
    var busWidth = Math.trunc(size.width / spectrum.length);
    var margin = 4;
    for (var spectrumX = 0; spectrumX < spectrum.length; spectrumX++) {
        var spectrumValue = spectrum[spectrumX];
        if ((spectrumValue > 1) || (spectrumValue < 0)) {
            throw new Error('Spectrum values must be in range from 0 to 1');
        }
        var rectX = paddingLeft + busWidth * spectrumX;
        var rectHeight = size.height * spectrumValue;
        exports.drawRect(imageDstBuffer, { x: rectX + margin, y: 0 }, { width: busWidth - margin / 2, height: rectHeight }, color);
    }
};
exports.createVisualizerFrame = function (backgroundImageBuffer, spectrum, size, color) {
    var image = Object.assign({}, backgroundImageBuffer);
    image.data = Buffer.from(image.data);
    var rgbSpectrumColor = (typeof color === 'string') ? hexToRgb(color) : color;
    drawSpectrum(image, spectrum, size, rgbSpectrumColor);
    return image;
};
exports.convertToBmp = function (filePath) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve) { return __awaiter(void 0, void 0, void 0, function () {
                var image;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, jimp_1.default.read(filePath)];
                        case 1:
                            image = _a.sent();
                            image.getBuffer("image/bmp", function (err, value) {
                                resolve(value);
                            });
                            return [2 /*return*/];
                    }
                });
            }); })];
    });
}); };
exports.parseImage = function (buffer) { return bmp_js_1.decode(buffer); };
exports.createImageBuffer = function (image) { return bmp_js_1.encode(image).data; };
exports.getImageColor = function (image) {
    var blueSum = 0;
    var greenSum = 0;
    var redSum = 0;
    for (var currY = 0; currY < image.height; currY++) {
        for (var currX = 0; currX < image.width; currX++) {
            var idx = (image.width * currY + currX) << 2;
            blueSum += image.data[idx + 1];
            greenSum += image.data[idx + 2];
            redSum += image.data[idx + 3];
        }
    }
    var pixelsCount = image.width * image.height;
    return {
        red: ~~(redSum / pixelsCount),
        green: ~~(greenSum / pixelsCount),
        blue: ~~(blueSum / pixelsCount)
    };
};
exports.invertColor = function (color) {
    return ({ red: 255 - color.red, green: 255 - color.green, blue: 255 - color.blue });
};
var hexToRgb = function (hex) {
    var red = parseInt(hex.substring(1, 3), 16);
    var green = parseInt(hex.substring(3, 5), 16);
    var blue = parseInt(hex.substring(5, 7), 16);
    return { red: red, green: green, blue: blue };
};
//# sourceMappingURL=image.js.map