"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var audio_1 = require("./audio");
var image_1 = require("./image");
var video_1 = require("./video");
exports.PCM_FORMAT = {
    bit: 8,
    sign: 'u',
    parseFunction: audio_1.bufferToUInt8
};
var FFMPEG_FORMAT = "" + exports.PCM_FORMAT.sign + exports.PCM_FORMAT.bit;
var sleep = function (timeout) {
    return new Promise(function (resolve) { return setTimeout(resolve, 1000); });
};
exports.renderAudioVisualizer = function (config, onProgress, shouldStop) {
    return new Promise(function (resolve) { return __awaiter(void 0, void 0, void 0, function () {
        var audioFilePath, backgroundImagePath, outVideoPath, backgroundImageBmpBuffer, backgroundImage, audioReader, audioBuffer, sampleRate, FPS, spectrumWidth, spectrumHeight, spectrumColor, ffmpeg_cfr, ffmpeg_preset, frame_processing_delay, spectrumBusesCount, audioDuration, framesCount, audioDataStep, ffmpegVideoWriter, processSpectrum, _loop_1, i, state_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    audioFilePath = path_1.default.resolve(config.audio.path);
                    backgroundImagePath = path_1.default.resolve(config.image.path);
                    outVideoPath = path_1.default.resolve(config.outVideo.path);
                    return [4 /*yield*/, image_1.convertToBmp(backgroundImagePath)];
                case 1:
                    backgroundImageBmpBuffer = _a.sent();
                    backgroundImage = image_1.parseImage(backgroundImageBmpBuffer);
                    return [4 /*yield*/, audio_1.createAudioBuffer(audioFilePath, FFMPEG_FORMAT)];
                case 2:
                    audioReader = _a.sent();
                    audioBuffer = audioReader.audioBuffer;
                    sampleRate = audioReader.sampleRate;
                    if (!sampleRate) {
                        throw new Error('ffmpeg didn\'t show audio sample rate');
                    }
                    FPS = config.outVideo.fps || 60;
                    spectrumWidth = (config.outVideo.spectrum && config.outVideo.spectrum.width) ||
                        backgroundImage.width * 0.4;
                    spectrumHeight = (config.outVideo.spectrum && config.outVideo.spectrum.height) ||
                        backgroundImage.height * 0.1;
                    spectrumColor = (config.outVideo.spectrum && config.outVideo.spectrum.color) ||
                        image_1.invertColor(image_1.getImageColor(backgroundImage));
                    ffmpeg_cfr = config.tweaks && config.tweaks.ffmpeg_cfr;
                    ffmpeg_preset = config.tweaks && config.tweaks.ffmpeg_preset;
                    frame_processing_delay = config.tweaks && config.tweaks.frame_processing_delay;
                    spectrumBusesCount = 64;
                    audioDuration = audioBuffer.length / sampleRate;
                    framesCount = Math.trunc(audioDuration * FPS);
                    audioDataStep = Math.trunc(audioBuffer.length / framesCount);
                    ffmpegVideoWriter = video_1.spawnFfmpegVideoWriter(__assign(__assign(__assign({ audioFilename: audioFilePath, videoFileName: outVideoPath, fps: FPS }, (!!onProgress && { onStderr: video_1.getProgress(video_1.calculateProgress(framesCount + 1, onProgress)) })), (ffmpeg_cfr && { crf: ffmpeg_cfr })), (ffmpeg_preset && { preset: ffmpeg_preset })));
                    ffmpegVideoWriter.on('exit', function (code) { return resolve(code); });
                    processSpectrum = audio_1.createSpectrumsProcessor(spectrumBusesCount);
                    _loop_1 = function (i) {
                        var audioDataParser, spectrum, frameImage, frameImageBuffer, isFrameProcessed;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    audioDataParser = function () {
                                        return exports.PCM_FORMAT.parseFunction(audioBuffer, i * audioDataStep, i * audioDataStep + audioDataStep);
                                    };
                                    spectrum = processSpectrum(i, audioDataParser);
                                    frameImage = image_1.createVisualizerFrame(backgroundImage, spectrum, { width: spectrumWidth, height: spectrumHeight }, spectrumColor);
                                    frameImageBuffer = image_1.createImageBuffer(frameImage);
                                    isFrameProcessed = ffmpegVideoWriter.stdin.write(frameImageBuffer);
                                    if (!!isFrameProcessed) return [3 /*break*/, 2];
                                    return [4 /*yield*/, video_1.waitDrain(ffmpegVideoWriter.stdin)];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    if (shouldStop && shouldStop()) {
                                        return [2 /*return*/, "break"];
                                    }
                                    if (!frame_processing_delay) return [3 /*break*/, 4];
                                    return [4 /*yield*/, sleep(frame_processing_delay)];
                                case 3:
                                    _a.sent();
                                    _a.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    };
                    i = 0;
                    _a.label = 3;
                case 3:
                    if (!(i < framesCount)) return [3 /*break*/, 6];
                    return [5 /*yield**/, _loop_1(i)];
                case 4:
                    state_1 = _a.sent();
                    if (state_1 === "break")
                        return [3 /*break*/, 6];
                    _a.label = 5;
                case 5:
                    i++;
                    return [3 /*break*/, 3];
                case 6:
                    ffmpegVideoWriter.stdin.end();
                    return [2 /*return*/];
            }
        });
    }); });
};
//# sourceMappingURL=index.js.map