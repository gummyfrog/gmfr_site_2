"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var ffmpeg_static_1 = require("ffmpeg-static");
exports.spawnFfmpegVideoWriter = function (config) {
    var crf = config.crf || '23';
    var preset = config.preset || 'medium';
    var args = [
        '-y',
        '-i', config.audioFilename,
        '-crf', crf,
        '-c:a', 'aac', '-b:a', '384k', '-profile:a', 'aac_low',
        '-c:v', 'libx264', '-r', "" + config.fps, '-pix_fmt', 'yuv420p', '-preset', preset, config.videoFileName,
        '-r', "" + config.fps,
        '-i', '-'
    ];
    var ffmpeg = child_process_1.spawn(ffmpeg_static_1.path, args);
    ffmpeg.stdin.pipe(process.stdout);
    if (config.onStderr) {
        ffmpeg.stderr.on('data', config.onStderr);
    }
    return ffmpeg;
};
exports.getProgress = function (onProgress) {
    return function (stderrOutput) {
        var matchResult = stderrOutput.toString().match(/frame=[ ]+(\d+)/);
        if (!matchResult) {
            return;
        }
        var currentFrame = +matchResult[1];
        if (isNaN(currentFrame)) {
            return;
        }
        onProgress(currentFrame);
    };
};
exports.calculateProgress = function (framesCount, callback) {
    return function (currentFrame) {
        return callback(+(currentFrame / framesCount * 100).toFixed(2));
    };
};
exports.waitDrain = function (stream) {
    return new Promise(function (resolve) { return stream.once('drain', resolve); });
};
//# sourceMappingURL=video.js.map