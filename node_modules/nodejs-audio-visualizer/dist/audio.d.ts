/// <reference types="node" />
export declare const skipEvery: <T>(skipIndex: number) => (element: T, index: number) => boolean;
export declare const getPeaks: (spectrums: number[], prevPeaks?: number[] | undefined) => number[];
export declare const correctPeaks: (spectrums: number[], peaks: number[]) => number[];
export declare const smoothValues: (spectrums: number[], prevSpectrums?: number[] | undefined) => number[];
export declare const createSpectrumsProcessor: (busesCount: number) => (frameIndex: number, parseAudioData: () => number[]) => number[];
export declare const bufferToUInt8: (buffer: Buffer, start: number, end: number) => number[];
export declare const normalizeAudioData: (PCMData: number[]) => number[];
export declare const spawnFfmpegAudioReader: (filename: string, format: string) => import("child_process").ChildProcessWithoutNullStreams;
export declare const createAudioBuffer: (filename: string, format: string) => Promise<{
    audioBuffer: Buffer;
    sampleRate: number;
}>;
